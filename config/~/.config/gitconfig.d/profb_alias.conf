[alias]
aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/' | sort
authors ="!git shortlog -s | cut -c8-"
s=status
sw=switch
fl = flow

br = branch --verbose --all
brx= branch --delete
brX= branch --delete --force
c= clone --depth=1 --shallow-submodules


amend = !LC_ALL=C GIT_COMMITTER_DATE="$(date)" git commit --amend --no-edit --reset-author --date=now --allow-empty
co = checkout
cob = checkout -b
cm = commit -m
merge = merge --no-commit --no-ff
note = "commit --allow-empty"
rebase = rebase --interactive
save = !git add -A && git commit -m 'chore: commit save point'
snapshot = !git add -u && git commit -m \"Snapshot\"
unstage = reset HEAD --
uncommit = reset HEAD~1 --soft
wip = !git add . && git commit -m \"WIP Stash\"


# logs
l = log --graph --oneline
# View the log and diff for a commit (previous if no SHA1 provided)
details = log -n1 -p --format=fuller
notes = log --pretty=oneline --abbrev-commit --notes
last = log -1 HEAD
standup = !git log --since yesterday --pretty=short --author `git config user.email`
today = log --since=midnight --pretty='%h %ad %s' --graph --date=format:'%H:%M:%S'
uncommit-local = reset HEAD~1 --soft
week = log --since=1.weeks --pretty='%h %ad %s' --graph --date=format:'%Y-%m-%d'
month = log --since=4.weeks --pretty='%h %ar %s' --graph
# Show the current branch name (usefull for shell prompts)
brname = !git branch | grep "^*" | awk '{ print $2 }'
# Which files are receiving the most "love"
churn = !git log --all -M -C --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print "count,file"} {print $1 "," $2}'

tags = tag -l
# Start a new local repository and perform initial commit
this = !git init && git add . && git commmit -m \"Initial commit.\"

pull = pull --rebase
p = !git push origin $(git rev-parse --abbrev-ref HEAD)
done = !git push origin HEAD
aapushf = !git add -u && git apushf
apushf = !git amend && git pushf
pushf = push --force-with-lease
pushn = push --no-verify
pushu = push -u origin HEAD

# After fetching, remove any remote-tracking branches which no longer exist on the remote. prune options
sync = fetch --prune && merge --no-ff master
trim = !git fetch --prune && git prune && git prune-gone && git prune-remote && git reflog expire --expire=now --all && git gc --prune=now && git fsck 
prune-gone = !git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -fD
prune-remote = remote prune origin # prune branches deleted from remote
